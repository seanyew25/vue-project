# Sample workflow for building and deploying a Nuxt site to GitHub Pages
#
# To get started with Nuxt see: https://nuxtjs.org/docs/get-started/installation
#
name: Deploy Vue Project

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Build job
  # 1 job runs on 1 server
  # runs on parallel by default
  build:
    runs-on: ubuntu-latest
    # can choose macos, windows or linux
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the commit hash
        id: get_commit_hash
        run: |
          echo "TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: View commit hash
        run: echo ${{ env.TAG }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      # some tests to be performed here

      - name: Install dependencies
        run: bun install

      - name: Run nuxt build
        run: bun run build

  publish:
    needs: build
    runs-on:
      ubuntu-latest
      # can test on more than one OS with strategy, matrix and os
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the commit hash
        id: get_commit_hash
        run: |
          echo "TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login into docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push database
        uses: docker/build-push-action@v6
        with:
          context: ${{github.workspace}}
          file: ${{github.workspace}}/Dockerfile.postgres-db
          push: true
          tags: seanyew25/vue-project-db:${{ env.TAG }}

      - name: Build and push website
        uses: docker/build-push-action@v6
        with:
          context: ${{github.workspace}}
          file: ${{github.workspace}}/Dockerfile.vue-project
          push: true
          tags: seanyew25/vue-project-app:${{ env.TAG }}

  deploy:
    needs: publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get the commit hash
        id: get_commit_hash
        run: |
          echo "TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: Create Docker Compose template
        run: |
          cat <<EOF > docker-compose.template.yml
          services:
            app:
              image: seanyew25/vue-project-app:{{TAG}}
              container_name: vue-project
              restart: unless-stopped
              ports:
                - 3000:3000
              depends_on:
                - db

            db:
              image: seanyew25/vue-project-db:{{TAG}}
              container_name: postgres-db
              environment:
                POSTGRES_PASSWORD: seanyew123
              restart: unless-stopped
              volumes:
                - pgdata:/var/lib/postgresql/data

              ports:
                - "5432:5432"

            pgadmin:
              image: dpage/pgadmin4
              restart: unless-stopped
              container_name: nuxt-pgadmin
              environment:
                - PGADMIN_DEFAULT_EMAIL=admin@admin.com
                - PGADMIN_DEFAULT_PASSWORD=pgadmin4
              ports:
                - "5050:80"
              depends_on:
                - db

          volumes:
            pgdata:

      - name: Replace placeholders in Docker Compose file
        run: |
          sed "s/{{TAG}}/$TAG/g" docker-compose.template.yml > docker-compose.yml

      - name: secure copy docker-compose.yml to ec2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_RSA_KEY }}
          source: "/github/workspace/docker-compose.yml"
          target: "~"
          strip_components: 2

      - name: ssh into ec2 instance and deploy website
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_RSA_KEY }}
          script: |
            if [ "$(docker ps -a -q)" ]; then
              docker rm --force $(docker ps -a -q)            
            fi

            if [ "$(docker images -q)" ]; then
              docker rmi $(docker images -q)
            fi

            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            docker compose down
            docker volume rm ec2-user_pgdata
            docker compose pull
            docker compose up -d
